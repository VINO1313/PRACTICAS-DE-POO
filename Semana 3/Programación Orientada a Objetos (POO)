# Programa con POO para calcular el promedio semanal de temperaturas

class ClimaSemanal:
    def __init__(self):
        self.__temperaturas = []  # Encapsulamiento

    def ingresar_temperaturas(self):
        for i in range(7):
            temp = float(input(f"Ingrese la temperatura del día {i+1}: "))
            self.__temperaturas.append(temp)

    def calcular_promedio(self):
        if len(self.__temperaturas) == 0:
            return 0
        return sum(self.__temperaturas) / len(self.__temperaturas)

    def mostrar_promedio(self):
        promedio = self.calcular_promedio()
        print(f"El promedio semanal de temperatura es: {promedio:.2f}°C")

# Herencia básica para demostrar su uso (opcional)
class ClimaConMensaje(ClimaSemanal):
    def mostrar_mensaje_final(self):
        print("Gracias por usar el programa de promedio de clima.")

def main():
    print("=== Promedio Semanal de Temperaturas (POO) ===")
    clima = ClimaConMensaje()
    clima.ingresar_temperaturas()
    clima.mostrar_promedio()
    clima.mostrar_mensaje_final()

if __name__ == "__main__":
    main()


# Comparación entre Programación Tradicional y Programación Orientada a Objetos

## Programación Tradicional

- Se basa en funciones y estructuras secuenciales.
- El flujo de control es lineal, lo que la hace sencilla para tareas pequeñas.
- Menor reutilización de código.
- El acceso a los datos es directo, sin encapsulamiento.
- Ideal para programas simples y rápidos de implementar.

## Programación Orientada a Objetos

- Se estructura en clases y objetos, lo que permite modelar entidades del mundo real.
- Favorece el **encapsulamiento**, la **herencia** y el **polimorfismo**.
- Mejor organización del código y mayor reutilización.
- Facilita el mantenimiento y la ampliación del sistema.
- Es preferida en aplicaciones grandes y complejas.

## Conclusión

Ambos enfoques son útiles dependiendo del contexto. La programación tradicional es más directa, mientras que la POO ofrece una estructura más robusta para aplicaciones a largo plazo.
